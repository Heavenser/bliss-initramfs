#!/bin/bash

# ZFS InitramFS Creator
# This script will generate the entire ZFS initramfs with
# all of it's dependencies.

# Copyright (C) 2012 Jonathan Vasquez
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License v2 as published by
# the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

JV_APP_NAME="ZFS InitramFS Creator"
JV_AUTHOR="Jonathan Vasquez"
JV_EMAIL="jvasquez1011@gmail.com"
JV_CONTACT="${JV_AUTHOR} <${JV_EMAIL}>"
JV_VERSION="1.2.8~next"

# Used only for documentation purposes
JV_EXAMPLE_KERNEL="3.3.2-DESKTOP"

KERNEL_NAME="${1}"
ZFS_POOL_NAME="${2}"
MOD_PATH="/lib/modules/${KERNEL_NAME}"
HOME_DIR="$(pwd)"
TMPDIR="${HOME_DIR}/tempinit"

JV_LOCAL_BIN="bin"
JV_LOCAL_SBIN="sbin"
JV_LOCAL_LIB="lib"
JV_LOCAL_LIB64="lib64"
JV_BIN="/bin"
JV_SBIN="/sbin"
JV_LIB="/lib"
JV_LIB64="/lib64/"
JV_USR_BIN="/usr/bin"
JV_LOCAL_MOD="lib/modules/${KERNEL_NAME}"

# Basically a boolean that is used to switch to the correct library path
# Defaults to 64 bit
JV_LIB_PATH=0

# Hardcore architecture for now
# If x86_64 then use lib64 libraries, else use 32 bit

JV_CARCH="$(arch)"

if [[ "${JV_CARCH}" == "x86_64" ]]; then 
    ${JV_LIB_PATH}=0
elif [[ "${JV_CARCH}" == "i686" ]]; then
    // use lib (32 bit)
fi

# Check to see if "tempinit" exists, if it does, delete it for a fresh start
clean_up() {
    if [[ -d ${TMPDIR} ]]; then
        echo "Temporary directory exists. Deleting..."
        rm -rf ${TMPDIR}
        
        if [[ ! -d ${TMPDIR} ]]; then
            echo "Deleted the directory successfully."
        else
            echo "Failed to delete the directory. Exiting..." && exit
        fi
    fi
}

# Utility function to return back to home dir and clean up. For exiting on errors
return_and_clean() {
    cd ${HOME_DIR} && clean_up
}

# Checks to see if the zfs modules exist
check_zfs_modules() {
    if [[ ! -z ${1} ]]; then
        for X in ${1}; do
            if [[ "${X}" == "zavl" ]]; then
                if [[ ! -f "${MOD_PATH}/addon/zfs/avl/${X}.ko" ]]; then 
                    echo "Module: ${X}, doesn't exist. Quitting!" && return_and_clean && exit
                    exit
                fi
            elif [[ "${X}" == "znvpair" ]]; then
                if [[ ! -f "${MOD_PATH}/addon/zfs/nvpair/${X}.ko" ]]; then 
                    echo "Module: ${X}, doesn't exist. Quitting!" && return_and_clean && exit
                    exit
                fi
            elif [[ "${X}" == "zunicode" ]]; then
                if [[ ! -f "${MOD_PATH}/addon/zfs/unicode/${X}.ko" ]]; then 
                    echo "Module: ${X}, doesn't exist. Quitting!" && return_and_clean && exit
                    exit
                fi
            else 	
                if [[ ! -f "${MOD_PATH}/addon/zfs/${X}/${X}.ko" ]]; then 
                    echo "Module: ${X}, doesn't exist. Quitting!" && return_and_clean && exit
                    exit
                fi
            fi
        done
    else
        echo "Parameter ${1} is zero, please pass a parameter to use this function!" && return_and_clean && exit
	fi 
}

# Check to make sure that there is only 1 parameter
if [[ ${#} == 1 ]]; then
    if [[ "${1}" == "--version" ]] || [[ "${1}" == "-v" ]]; then
        echo "${JV_VERSION}" && exit
    elif [[ "${1}" == "--author" ]] || [[ "${1}" == "-a" ]]; then
        echo "${JV_CONTACT}" && exit
    elif [[ "${1}" == "--help" ]] || [[ "${1}" == "-h" ]]; then
        echo "${JV_APP_NAME} ${JV_VERSION}"
        echo "By ${JV_CONTACT}"
        echo ""
        echo "Usage: createInit <Kernel Name> <ZFS Pool Name>"
        echo "Example: createInit ${JV_EXAMPLE_KERNEL} rpool"
        echo ""
        echo "-h, --help  - This help screen"
        echo "-v, --version  - Application Version"
        echo "-a, --author  - Author of Application" && exit
    fi
elif [[ ${#} < 1 ]] || [[ ${#} > 2 ]]; then
    echo "Usage: createInit <Kernel Name> <ZFS Pool Name>. Example: createInit ${JV_EXAMPLE_KERNEL} rpool" && exit
fi

# Check to make sure kernel modules directory exists
if [[ ! -d ${MOD_PATH} ]]; then
    echo "Kernel modules directory doesn't exist for ${KERNEL_NAME}. Quitting" && exit
fi

echo "Generating ZFS initramfs for ${KERNEL_NAME}"

# Clean up old files
return_and_clean

# Begin
mkdir ${TMPDIR} 
cd ${TMPDIR}

mkdir -p bin sbin proc sys dev etc lib lib64 mnt/root ${JV_LOCAL_MOD} 

# Copy Requires Files
BINS="busybox zpool_layout hostid"

for B in ${BINS}; do
    # Check to see if files exist
	if [[ "${B}" == "hostid" ]] ; then
        if [[ -f "${JV_USR_BIN}/${B}" ]]; then
            echo "Copying ${B} into ${JV_LOCAL_BIN}" 
		    cp ${JV_USR_BIN}/${B} ${JV_LOCAL_BIN}
        else
            echo "${B} doesn't exist. Quitting!" && return_and_clean && exit
        fi
	else
        if [[ -f "${JV_BIN}/${B}" ]]; then
            echo "Copying ${B} into ${JV_LOCAL_BIN}" 
		    cp ${JV_BIN}/${B} ${JV_LOCAL_BIN}
        else
            echo "${B} doesn't exist. Quitting!" && return_and_clean && exit
        fi
	fi
done

# Copy SPL Files
SPL_BINARIES="spl splat"

for SPL in ${SPL_BINARIES}; do
    if [[ -f "${JV_SBIN}/${SPL}" ]]; then
        echo "Copying ${SPL} into ${JV_LOCAL_SBIN}" 
	    cp ${JV_SBIN}/${SPL} ${JV_LOCAL_SBIN}
    else
        echo "${SPL} doesn't exist. Quitting!" && return_and_clean && exit
    fi
done

SPL_MODULES="spl splat"

for SPL in ${SPL_MODULES}; do
    if [[ -f "${MOD_PATH}/addon/spl/${SPL}/${SPL}.ko" ]]; then
	    cp ${MOD_PATH}/addon/spl/${SPL}/${SPL}.ko ${JV_LOCAL_MOD}
    else
        echo "${SPL} doesn't exist. Quitting!" && return_and_clean && exit
    fi
done

# Copy ZFS Files
ZFS_BINARIES="mount.zfs zdb zfs zinject zpios zpool ztest"

for ZFS in ${ZFS_BINARIES}; do
    if [[ -f "${JV_SBIN}/${ZFS}" ]]; then
        echo "Copying ${ZFS} into ${JV_LOCAL_SBIN}" 
	    cp ${JV_SBIN}/${ZFS} ${JV_LOCAL_SBIN}
    else
        echo "${ZFS} doesn't exist. Quitting!" && return_and_clean && exit
    fi
done

ZFS_MODULES="zavl znvpair zunicode zcommon zfs zpios"

# Check to see if all ZFS modules exist beforehand to simplify for loop
# For future versions, all my previous functions will check the
# existence of files with functions.
check_zfs_modules ${ZFS_MODULES} || exit

for ZFS in ${ZFS_MODULES}; do
	if [ "${ZFS}" == "zavl" ]; then
        echo "Copying ${ZFS} into ${JV_LOCAL_MOD}" 
		cp ${MOD_PATH}/addon/zfs/avl/${ZFS}.ko ${JV_LOCAL_MOD} 
	elif [ "${ZFS}" == "znvpair" ]; then
        echo "Copying ${ZFS} into ${JV_LOCAL_MOD}" 
		cp ${MOD_PATH}/addon/zfs/nvpair/${ZFS}.ko ${JV_LOCAL_MOD}
	elif [ "${ZFS}" == "zunicode" ]; then
        echo "Copying ${ZFS} into ${JV_LOCAL_MOD}" 
		cp ${MOD_PATH}/addon/zfs/unicode/${ZFS}.ko ${JV_LOCAL_MOD}
	else 	
        echo "Copying ${ZFS} into ${JV_LOCAL_MOD}" 
		cp ${MOD_PATH}/addon/zfs/${ZFS}/${ZFS}.ko ${JV_LOCAL_MOD}
	fi 
done

# Get and copy all dependencies
ALL_BINARIES="${SPL_BINARIES} ${ZFS_BINARIES} ${BINS}"

# Check for CARCH, if x86_64, use that CARCH variable to find the libraries
# If i686, use that. Need to find implementation for different processors.
for X in ${ALL_BINARIES}; do
	if [[ "${X}" == "busybox" ]] || [[ "${X}" == "zpool_layout" ]] || [[ "${X}" == "hostid" ]] ; then
		DEPS="$(ldd bin/${X} | awk ''${JV_LIB64}' {print $1}' | sed -e "s%/lib64/%%")"
	else
		DEPS="$(ldd sbin/${X} | awk ''${JV_LIB64}' {print $1}' | sed "s%/lib64/%%")"
	fi 

	for Y in ${DEPS}; do
        echo "Copying ${Y} into ${JV_LOCAL_LIB64}" 
		cp -Lf ${JV_LIB64}/${Y} ${JV_LOCAL_LIB64}
	done
done

# Create Symlinks
BUSYBOX_TARGETS="mount tty sh"

cd ${TMPDIR}/bin 

for BB in ${BUSYBOX_TARGETS}; do
    if [[ -L "${BB}" ]]; then
        echo "${BB} link exists.. removing it"
        rm ${BB}
    fi

	ln -s busybox ${BB}

    if [[ -L "${BB}" ]]; then
        echo "${BB} link successfully created"
    fi
done

cd ${TMPDIR} 

# Create Additional Files
touch etc/mtab

if [[ -f "etc/mtab" ]]; then
    echo "mtab file created successfully"
else
    echo "Error created mtab file.. exiting" && return_and_clean && exit
fi

# Copy the init script
cd ${TMPDIR} && cp ${HOME_DIR}/files/init .

# Substitute correct values in using % as delimeter
# to avoid the slashes in the MOD_PATH [/lib/modules...]
sed -i -e '18s%""%"'${ZFS_POOL_NAME}'"%' -e '19s%""%"'${MOD_PATH}'"%' init

if [[ -f "init" ]]; then
    echo "init file created successfully"
else
    echo "Error created init file.. exiting" && return_and_clean && exit
fi

# Pack & Compress the files into an initramfs.
find . -print0 | cpio -o --null --format=newc | gzip -9 > ${HOME_DIR}/ZFS-${KERNEL_NAME}.img

if [[ -f ${HOME_DIR}/ZFS-${KERNEL_NAME}.img ]]; then
    echo "initramfs file created successfully"
else
    echo "Error creating initramfs file.. exiting" && return_and_clean && exit
fi

# Clean up
cd ${HOME_DIR} && clean_up

echo "Complete :)"

echo "Please copy the ZFS-${KERNEL_NAME}.img to your /boot directory"

exit 0
