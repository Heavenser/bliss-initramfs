#!/bin/bash

# Copyright (C) 2012 Jonathan Vasquez
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#  
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#  
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

JV_APP_NAME="ZFS InitramFS Creator"
JV_AUTHOR="Jonathan Vasquez"
JV_EMAIL="jvasquez1011@gmail.com"
JV_CONTACT="${JV_AUTHOR} <${JV_EMAIL}>"
JV_VERSION="1.2.9_next"

# Used only for documentation purposes
JV_EXAMPLE_KERNEL="3.3.2-DESKTOP"

KERNEL_NAME="${1}"
ZFS_POOL_NAME="${2}"
MOD_PATH="/lib/modules/${KERNEL_NAME}/"
HOME_DIR="$(pwd)"
TMPDIR="${HOME_DIR}/tempinit/"

JV_LOCAL_BIN="bin/"
JV_LOCAL_SBIN="sbin/"
JV_LOCAL_LIB="lib/"
JV_LOCAL_LIB64="lib64/"
JV_BIN="/bin/"
JV_SBIN="/sbin/"
JV_LIB32="/lib/"
JV_LIB64="/lib64/"
JV_USR_BIN="/usr/bin/"
JV_LOCAL_MOD="lib/modules/${KERNEL_NAME}/"

# Get CPU Architecture
JV_CARCH="$(arch)"

# Basically a boolean that is used to switch to the correct library path
# Defaults to 32 bit
JV_LIB_PATH=32

err_binNoExist() {
    echo "Binary: ${1} doesn't exist. Quitting!" && return_and_clean && exit
}

err_modNoExist() {
    echo "Module: ${1} doesn't exist. Quitting!" && return_and_clean && exit
}

# Check to see if "${TMPDIR}" exists, if it does, delete it for a fresh start
clean_up() {
    if [[ -d ${TMPDIR} ]]; then
        rm -rf ${TMPDIR}
        
        if [[ -d ${TMPDIR} ]]; then
            echo "Failed to delete the directory. Exiting..." && exit
        fi
    fi
}

# Utility function to return back to home dir and clean up. For exiting on errors
return_and_clean() {
    cd ${HOME_DIR} && clean_up
}

# Checks to see if the binaries exist
check_binaries() {
    echo "Entering check_binaries() ${#}"..
    if [[ ! -z ${#} ]]; then
        echo "parameters not empty for check_bins"
        for X in ${#}; do
            if [[ "${X}" == "hostid" ]]; then
                echo "Checking to see if ${X} exists"
                if [[  -f "${JV_USR_BIN}/${X}" ]]; then
                    err_binNoExist ${X}
                fi
            elif [[ "${X}" == "busybox" ]] || [[ "${X}" == "zpool_layout" ]]; then
                echo "Checking to see if ${X} exists"
                if [[ ! -f "${JV_BIN}/${X}" ]]; then
                    err_binNoExist ${X}
                fi
            else
                if [[ ! -f "${JV_SBIN}/${X}" ]]; then
                echo "Checking to see if ${X} exists"
                    err_binNoExist ${X}
                fi
            fi
        done
    else
        echo "Parameter ${1} is zero, please pass a parameter to use this function!" && return_and_clean && exit
	fi 
}
# Checks to see if the spl and zfs modules exist
check_modules() {
    echo "Entering check_modules with ${#} and ${1}"
    if [[ ! -z ${1} ]]; then
        for X in ${1}; do
            if [[ "${X}" == "spl" ]] || [[ "${X}" == "splat" ]]; then
                if [[ ! -f "${MOD_PATH}/addon/spl/${X}/${X}.ko" ]]; then
                    err_modNoExist ${X}
                fi
            elif [[ "${X}" == "zavl" ]]; then
                if [[ ! -f "${MOD_PATH}/addon/zfs/avl/${X}.ko" ]]; then 
                    err_modNoExist ${X}
                fi
            elif [[ "${X}" == "znvpair" ]]; then
                if [[ ! -f "${MOD_PATH}/addon/zfs/nvpair/${X}.ko" ]]; then 
                    err_modNoExist ${X}
                fi
            elif [[ "${X}" == "zunicode" ]]; then
                if [[ ! -f "${MOD_PATH}/addon/zfs/unicode/${X}.ko" ]]; then 
                    err_modNoExist ${X}
                fi
            else 	
                if [[ ! -f "${MOD_PATH}/addon/zfs/${X}/${X}.ko" ]]; then 
                    err_modNoExist ${X}
                fi
            fi
        done
    else
        echo "Parameter ${1} is zero, please pass a parameter to use this function!" && return_and_clean && exit
	fi 
}

print_copy() {
    echo "Copying ${1} into ${JV_LOCAL_BIN}"
}
# If x86_64 then use lib64 libraries, else use 32 bit
case ${JV_CARCH} in
x86_64)
    JV_LIB_PATH=64
    echo "Detected ${JV_LIB_PATH} bit platform"
    ;;
i[3-6]86)
    JV_LIB_PATH=32
    echo "Detected ${JV_LIB_PATH} bit platform"
    ;;
*)
    echo "Your architecture isn't supported, exiting" && return_and_clean && exit
esac

# Check to make sure that there is only 1 parameter
if [[ ${#} == 1 ]]; then
    if [[ "${1}" == "--version" ]] || [[ "${1}" == "-v" ]]; then
        echo "${JV_VERSION}" && exit
    elif [[ "${1}" == "--author" ]] || [[ "${1}" == "-a" ]]; then
        echo "${JV_CONTACT}" && exit
    elif [[ "${1}" == "--help" ]] || [[ "${1}" == "-h" ]]; then
        echo "${JV_APP_NAME} ${JV_VERSION}"
        echo "By ${JV_CONTACT}"
        echo ""
        echo "Usage: createInit <Kernel Name> <ZFS Pool Name>"
        echo "Example: createInit ${JV_EXAMPLE_KERNEL} rpool"
        echo ""
        echo "-h, --help  - This help screen"
        echo "-v, --version  - Application Version"
        echo "-a, --author  - Author of Application" && exit
    fi
elif [[ ${#} < 1 ]] || [[ ${#} > 2 ]]; then
    echo "Usage: createInit <Kernel Name> <ZFS Pool Name>. Example: createInit ${JV_EXAMPLE_KERNEL} rpool" && exit
fi

# Check to make sure kernel modules directory exists
if [[ ! -d ${MOD_PATH} ]]; then
    echo "Kernel modules directory doesn't exist for ${KERNEL_NAME}. Quitting" && exit
fi

#######################################################################

echo "Generating ZFS initramfs for ${KERNEL_NAME}"

# Clean up old files
return_and_clean

# Begin
mkdir ${TMPDIR} && cd ${TMPDIR}
mkdir -p bin sbin proc sys dev etc lib mnt/root ${JV_LOCAL_MOD} 

# If this computer is 64 bit, then make the lib64 dir as well
if [[ "${JV_LIB_PATH}" == "64" ]]; then
    mkdir lib64
fi

# For future versions, merge all corresponding binaries to one variable.
# Basically there will be only 1 function to get all the bins, and place
# them in their corresponding directories.

# Copy Requires Files
JV_BINARIES="busybox zpool_layout hostid spl splat mount.zfs zdb zfs zinject zpios zpool ztest"

# Check to see if the binaries exist
#check_binaries ${JV_BINARIES}

# Copy binaries
for X in ${JV_BINARIES}; do
	if [[ "${X}" == "hostid" ]]; then
            print_copy ${X} ${JV_LOCAL_BIN}
		    cp ${JV_USR_BIN}/${X} ${JV_LOCAL_BIN}
	elif [[ "${X}" == "busybox" ]] || [[ "${X}" == "zpool_layout" ]]; then
            echo "Copying ${X} into ${JV_LOCAL_BIN}"
		    cp ${JV_BIN}/${X} ${JV_LOCAL_BIN}
    else
            echo "Copying ${X} into ${JV_LOCAL_SBIN}"
	        cp ${JV_SBIN}/${X} ${JV_LOCAL_SBIN}
	fi
done

SPL_ZFS_MODULES="spl splat zavl znvpair zunicode zcommon zfs zpios"

# Check to see if all ZFS modules exist beforehand to simplify for loop
# For future versions, all my previous functions will check the
# existence of files with functions.
#check_modules ${SPL_ZFS_MODULES}

for X in ${SPL_ZFS_MODULES}; do
    if [[ "${X}" == "spl" ]] || [[ "${X}" == "splat" ]]; then
        echo "Copying ${X} into ${JV_LOCAL_MOD}" 
	    cp ${MOD_PATH}/addon/spl/${X}/${X}.ko ${JV_LOCAL_MOD}
	elif [ "${X}" == "zavl" ]; then
        echo "Copying ${X} into ${JV_LOCAL_MOD}" 
		cp ${MOD_PATH}/addon/zfs/avl/${X}.ko ${JV_LOCAL_MOD} 
	elif [ "${X}" == "znvpair" ]; then
        echo "Copying ${X} into ${JV_LOCAL_MOD}" 
		cp ${MOD_PATH}/addon/zfs/nvpair/${X}.ko ${JV_LOCAL_MOD}
	elif [ "${X}" == "zunicode" ]; then
        echo "Copying ${X} into ${JV_LOCAL_MOD}" 
		cp ${MOD_PATH}/addon/zfs/unicode/${X}.ko ${JV_LOCAL_MOD}
	else 	
        echo "Copying ${X} into ${JV_LOCAL_MOD}" 
		cp ${MOD_PATH}/addon/zfs/${X}/${X}.ko ${JV_LOCAL_MOD}
	fi 
done

# Check for CARCH [JV_LIB_PATH, either 32 or 64], if x86_64, use the corresponding variable 
# to find the libraries. If i686, use that.
for X in ${JV_BINARIES}; do
	if [[ "${X}" == "busybox" ]] || [[ "${X}" == "zpool_layout" ]] || [[ "${X}" == "hostid" ]]; then
        if [[ "${JV_LIB_PATH}" == "32" ]]; then
		    DEPS="$(ldd bin/${X} | awk ''${JV_LIB32}' {print $1}' | sed -e "s%${JV_LIB32}%%")"
        else
		    DEPS="$(ldd bin/${X} | awk ''${JV_LIB64}' {print $1}' | sed -e "s%${JV_LIB64}%%")"
        fi
	else
        if [[ "${JV_LIB_PATH}" == "32" ]]; then
		    DEPS="$(ldd sbin/${X} | awk ''${JV_LIB32}' {print $1}' | sed -e "s%${JV_LIB32}%%")"
        else
		    DEPS="$(ldd sbin/${X} | awk ''${JV_LIB64}' {print $1}' | sed -e "s%${JV_LIB64}%%")"
        fi
	fi 

	for Y in ${DEPS}; do
        if [[ "${JV_LIB_PATH}" == "32" ]]; then
            echo "Copying ${Y} into ${JV_LOCAL_LIB}" 
		    cp -Lf ${JV_LIB32}/${Y} ${JV_LOCAL_LIB}
        else
            echo "Copying ${Y} into ${JV_LOCAL_LIB64}" 
		    cp -Lf ${JV_LIB64}/${Y} ${JV_LOCAL_LIB64}
        fi
	done
done

# Create Symlinks
BUSYBOX_TARGETS="mount tty sh"

cd ${TMPDIR}/${JV_LOCAL_BIN} 

for BB in ${BUSYBOX_TARGETS}; do
    if [[ -L "${BB}" ]]; then
        echo "${BB} link exists.. removing it"
        rm ${BB}
    fi

	ln -s busybox ${BB}

    if [[ -L "${BB}" ]]; then
        echo "${BB} link successfully created"
    fi
done

cd ${TMPDIR} 

# Create Additional Files
touch etc/mtab

if [[ ! -f "etc/mtab" ]]; then
    echo "Error created mtab file.. exiting" && return_and_clean && exit
fi

# Copy the init script
cd ${TMPDIR} && cp ${HOME_DIR}/files/init .

# Substitute correct values in using % as delimeter
# to avoid the slashes in the MOD_PATH [/lib/modules...]
sed -i -e '23s%""%"'${ZFS_POOL_NAME}'"%' -e '24s%""%"'${MOD_PATH}'"%' init

if [[ ! -f "init" ]]; then
    echo "Error created init file.. exiting" && return_and_clean && exit
fi

# Pack & Compress the files into an initramfs archive
find . -print0 | cpio -o --null --format=newc | gzip -9 > ${HOME_DIR}/ZFS-${KERNEL_NAME}.img

if [[ ! -f ${HOME_DIR}/ZFS-${KERNEL_NAME}.img ]]; then
    echo "Error creating initramfs file.. exiting" && return_and_clean && exit
fi

# Clean up
cd ${HOME_DIR} && clean_up

echo "Complete :)"

echo "Please copy the ZFS-${KERNEL_NAME}.img to your /boot directory"

exit 0
