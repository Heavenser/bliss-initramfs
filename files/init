#!/bin/busybox sh

# Copyright (C) 2012 Jonathan Vasquez <jvasquez1011@gmail.com>
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

# Variables
NEW_ROOT="/mnt/root"
NEW_INIT="/sbin/init"

USE_ZFS="0"
USE_LUKS="0"

# Function to start rescue shell
rescue_shell()
{
	echo "Booting into rescue shell..."
	busybox --install -s
	exec /bin/sh
}

# Function to load ZFS modules
load_modules()
{
	modules=""

	if [ "${USE_ZFS}" = "1" ]; then
		modules="${modules} spl splat zavl znvpair zcommon zunicode zfs zpios"
	fi
		
	for x in ${modules}; do
		# If it's the ZFS module, and there is a cachesize set, then set the arc max to it
		if [ "${x}" = "zfs" -a ! -z "${cache_size}" ]; then
			modprobe ${x} zfs_arc_max=${cache_size}
		else
			modprobe ${x}
		fi
	done
}

# Mount Kernel Devices
mount -t proc none /proc
mount -t devtmpfs none /dev
mount -t sysfs none /sys

# Prevent kernel from printing on screen
echo 0 > /proc/sys/kernel/printk

# Load Modules
load_modules || rescue_shell

# Open encrypted root
if [ "${USE_LUKS}" = "1"]; then
	if [ ! -z "${enc_root}" ]; then
		cryptsetup luksOpen ${enc_root} dmcrypt_root || rescue_shell
	else
		echo "You didn't pass the 'enc_root' variable to the kernel" || rescue_shell
	fi
fi

# Mount ZFS Pool
if [ "${USE_ZFS}" = "1"]; then
	zpool import -f -d /dev -o cachefile= -R ${NEW_ROOT} ${pool_name} || rescue_shell
fi

# Unmount Kernel Devices
umount /proc
umount /dev
umount /sys

# Switch to the new root
exec switch_root ${NEW_ROOT} ${NEW_INIT} || rescue_shell
