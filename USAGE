=======================================
Usage
=======================================
The initramfs script is very easy to use.

1. Creating the initramfs

Just clone it or extract it into a directory and cd into it.

Run the script by running: ./createInit
* It must be run as root since root is the only user that can run `depmod`.

* If the script doesn't run and gives you a permission denied message,
  give it execution permission: `chmod +x createInit` and then try again.

Select the option that you want, and tell it which kernel you want to use.

After that the required files will be gathered and packed into an initramfs.

You will find the initramfs in the directory that you are currently in.
Copy the file to your boot directory and name it whatever you want.

2. Setting it up in the bootloader

If the following information is true:
Kernel     = vmlinuz-3.8.7-ALL
Initramfs  = initrd-3.8.7-ALL.img 
Bootloader = GRUB 2
Partition Layout is GPT
and /boot is on /dev/sda1 formatted with the ext2 filesystem

I would do the following:

(open up the bootloader config (for GRUB 2 it's grub.cfg))

`vim /boot/grub/grub.cfg`

and add a new entry:

# Funtoo
menuentry "Funtoo - 3.8.7" {
	insmod part_gpt
	insmod ext2

	set root=(hd0,gpt1)

	linux /vmlinuz-3.8.7-ALL root=rpool/ROOT/funtoo quiet
	initrd /initrd-3.8.7-ALL.img
}

This would mount my `rpool/ROOT/funtoo` dataset. `root` is the kernel parameter you
need to declare so that the initramfs knows which dataset you want to boot into.

=======================================
Kernel Options:
=======================================
ZFS:
root - ZFS root name
	example: linux <kernel> root=rpool/ROOT/funtoo

arcmax - Sets the max ARC cache size (in bytes)
	example: linux <kernel> arcmax=536870912
	 this sets the arcmax to 512MB

So a complete line could look like this:
 linux <kernel> arcmax=536870912 root=rpool/ROOT/funtoo
 
 Which would mount the `rpool/ROOT/funtoo` ZFS dataset with the arc_max being 512 MB

nocache - Ignores zpool.cache. Useful for booting if you have an old
         cache file that is preventing you from booting. Make sure to regenerate a new
	 initrd so you don't have to keep using this option.

	 example: linux <kernel> root=rpool/ROOT/funtoo nocache

refresh_cache - Ignores the zpool.cache (if there is one in the initramfs),
                Mounts the OS and deletes the old zpool.cache that it has,
		Copies the new zpool.cache that the initramfs created into
		the OS.

		This is extremely useful if you had an old zfs pool and you
		changed it in any way (Maybe you have a RAID1 and now have
		a RAID10? or a RAIDZ2).

	 	example: linux <kernel> root=rpool/ROOT/funtoo refresh_cache

su - Single User Mode. This is a really crappy implementation of a single user,
     mode. But at least it will help you if you forgot to change your password,
     after installation.

     example: linux <kernel> root=rpool/ROOT/funtoo su

LUKS + ZFS:
Follow the same instructions as above, but also add "enc_root=" to your
kernel line.

enc_root - Encrypted root drive
	example: linux <kernel> enc_root=/dev/sda2

If you have your zpool on spread over multiple drives, you can pass them all
to this variable as well:
	example: linux <kernel> enc_root=/dev/sda2,/dev/sdb3,/dev/sdc4,/dev/sdd5,/dev/sde6

LUKS passphrase:
The easiest way to pass the passphrase is just to wait till the initramfs asks you for it.
When this happens, it will use the _same_ passphrase for all your pools. This is to make it
convenient for you. It would be annoying to have a zpool on 6 drives (Encrypted RAIDZ2 let's say),
and then you had to put the password for each one. If you still want to do this, then just leave
the passphrase blank when the initramfs asks you for it.

OTHER:
recover - Use this if you want the initrd to throw you into a rescue shell.
	  Useful for recovery purposes.

	  example: linux <kernel> recover
