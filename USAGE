=======================================
Usage
=======================================
The initramfs script is very easy to use.

1. Creating the initramfs

Just clone it or extract it into a directory and cd into it.

Run the script by running: ./createInit
* It must be run as root since root is the only user that can run `depmod`.

* If the script doesn't run and gives you a permission denied message,
  give it execution permission: `chmod +x createInit` and then try again.

Select the option that you want, and tell it which kernel you want to use.

After that the required files will be gathered and packed into an initramfs.

You will find the initramfs in the directory that you are currently in.
Copy the file to your boot directory and name it whatever you want.

2. Setting it up in the bootloader

If the following information is true:
Kernel     = vmlinuz-3.8.7-ALL
Initramfs  = initrd-3.8.7-ALL.img 
Bootloader = GRUB 2
Partition Layout is GPT
and /boot is on /dev/sda1 formatted with the ext2 filesystem

I would do the following:

(open up the bootloader config (for GRUB 2 it's grub.cfg))

`vim /boot/grub/grub.cfg`

and add a new entry:

# Funtoo
menuentry "Funtoo - 3.8.13" {
	insmod part_gpt
	insmod ext2

	set root=(hd0,gpt1)

	linux /vmlinuz-3.8.13-ALL root=rpool/ROOT/funtoo quiet
	initrd /initrd-3.8.13-ALL.img
}

This would mount my `rpool/ROOT/funtoo` dataset. `root` is the kernel parameter you
need to declare so that the initramfs knows which dataset you want to boot into.

Example of an encrypted zfs pool on 4 drives with a gpg encrypted keyfile

# Funtoo
menuentry "Funtoo - 3.8.13" {
	insmod part_gpt
	insmod ext2

	set root=(hd0,gpt1)

	linux /vmlinuz-3.8.13-ALL root=rpool/ROOT/funtoo enc_root=/dev/sda3,/dev/sdb3,/dev/sdc3,/dev/sdd3 enc_type=key_gpg quiet
	initrd /initrd-3.8.13-ALL.img
}

=======================================
Kernel Options:
=======================================
ZFS:
root - ZFS root name
	example: linux <kernel> root=rpool/ROOT/funtoo

arcmax - Sets the max ARC cache size (in bytes)
	example: linux <kernel> arcmax=536870912
	 this sets the arcmax to 512MB

So a complete line could look like this:
 linux <kernel> arcmax=536870912 root=rpool/ROOT/funtoo
 
 Which would mount the `rpool/ROOT/funtoo` ZFS dataset with the arc_max being 512 MB

nocache - Ignores zpool.cache. Useful for booting if you have an old
         cache file that is preventing you from booting. Make sure to regenerate a new
	 initrd so you don't have to keep using this option.

	 example: linux <kernel> root=rpool/ROOT/funtoo nocache

refresh - Ignores the zpool.cache (if there is one in the initramfs),
                Mounts the OS and deletes the old zpool.cache that it has,
		Copies the new zpool.cache that the initramfs created into
		the OS.

		This is extremely useful if you had an old zfs pool and you
		changed it in any way (Maybe you have a RAID1 and now have
		a RAID10? or a RAIDZ2).

	 	example: linux <kernel> root=rpool/ROOT/funtoo refresh_cache

su - Single User Mode. This is a really crappy implementation of a single user,
     mode. But at least it will help you if you forgot to change your password,
     after installation.

     example: linux <kernel> root=rpool/ROOT/funtoo su

LUKS + ZFS:
Follow the same instructions as above, but also add "enc_root=" and "enc_type" to your kernel line.

enc_root - Encrypted root drive (You need the enc_type variable below as well)
	example: linux <kernel> enc_root=/dev/sda2

If you have your zpool on spread over multiple drives, you can pass them all
to this variable as well:
	example: linux <kernel> enc_root=/dev/sda2,/dev/sdb3,/dev/sdc4,/dev/sdd5,/dev/sde6

enc_type - What type of method will are you using to decrypt?
	Types: pass - passphrase
	       key - plain keyfile
	       key_gpg - keyfile encrypted with gpg

	example: linux <kernel> enc_root=/dev/sda3 enc_type=key

enc_key_drive - What drive the keyfile in?
	example: linux <kernel> enc_root=/dev/sda3 enc_type=key enc_key_drive=/dev/sdb1

	In the above example, we use /dev/sdb1 because we will assume that every time we turn on the machine, 
	the encryption key will be in /dev/sdb1. We also assume that if you have your key in a removable media,
	each time you plug that media in, the kernel will detect that device as /dev/sdb1. Using UUIDs would be a better
	solution, but that would require bringing udev or some type of mechanism for automatically getting UUIDs and all
	that stuff.

enc_key - What is the path to the keyfile? 
	You basically pass to grub where in the drive the file is located 
	(After the initramfs mounts the drive that you have the key in).

	example: linux <kernel> enc_root=/dev/sda3 enc_type=key enc_key_drive=/dev/sdb1 enc_key=/keys/root.gpg

	In this example, once the initramfs mounts /dev/sdb1, it will look for the /keys/root.gpg at /dev/sdb1.
	So if the initramfs mounts /dev/sdb1 at /mnt/key, it will look for the key at /mnt/key/keys/root.gpg.

LUKS passphrase/key:
The easiest way to pass the passphrase is just to wait till the initramfs asks you for it.
When this happens, it will use the _same_ passphrase  (or same key) for all your pools. This is to make it
convenient for you. It would be annoying to have a zpool on 6 drives (Encrypted RAIDZ2 let's say),
and then you had to put the password for each one. If you still want to do this, then just leave
the passphrase blank when the initramfs asks you for it.

OTHER:
recover - Use this if you want the initrd to throw you into a rescue shell.
	  Useful for recovery purposes.

	  example: linux <kernel> recover


=======================================
Modules Support:
=======================================
If you have compiled some critical stuff as modules rather than them being built into the kernel,
you can now write which modules you need in the hooks/addon.sh "ADDON_MODS" variable. The initramfs
will gather the module and it's dependencies and put them in the initramfs for you. Then the initramfs will
automatically load all those modules for you at boot.

Example:
	ADDON_MODS="i915 zfs ahci ext2 ext3 ext4 dm-crypt ohci-hcd ehci-hcd xhci-hcd usb-storage"

	That example basically loads the intel i915 gfx driver, zfs, ahci, ext2-4 filesystem hdd drivers,
	dm-crypt for luks support driver, ohci/ehci/xhci usb 1.1,2.0,3.0 drivers and the usb-storage driver.
	All the dependencies are automatically gathered and compressed by the initramfs, and automatically
	loaded at boot in that order.
